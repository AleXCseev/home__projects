{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { withLayout } from \"../../layout/Layout\";\nimport axios from \"axios\";\nimport { firstLevelMenu } from \"../../helpers/helpers\";\nimport { TopPageComponent } from \"../../page-components\";\nimport { API } from \"../../helpers/api\";\nimport Head from \"next/head\";\nimport { Error404 } from \"../404\";\nconst firstCategory = 0;\n\nfunction TopPage({\n  firstCategory,\n  page,\n  products\n}) {\n  if (!page || !products) {\n    return /*#__PURE__*/_jsx(Error404, {});\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: page.metaTitle\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: page.metaDescription\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:title\",\n        content: page.metaTitle\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:description\",\n        content: page.metaDescription\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        property: \"og:type\",\n        content: \"article\"\n      })]\n    }), /*#__PURE__*/_jsx(TopPageComponent, {\n      firstCategory: firstCategory,\n      page: page,\n      products: products\n    })]\n  });\n}\n\nexport default withLayout(TopPage);\nexport const getStaticPaths = async () => {\n  let paths = [];\n\n  for (const m of firstLevelMenu) {\n    const {\n      data: menu\n    } = await axios.post(process.env.NEXT_PUBLIC_DOMAIN + \"/api/top-page/find\", {\n      firstCategory: m.id\n    });\n    paths = paths.concat(menu.flatMap(s => s.pages.map(p => `/${m.route}/${p.alias}`)));\n  }\n\n  return {\n    paths,\n    fallback: true\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  if (!params) {\n    return {\n      notFound: true\n    };\n  }\n\n  const firstCategoryItem = firstLevelMenu.find(m => m.route == params.type);\n\n  if (!firstCategoryItem) {\n    return {\n      notFound: true\n    };\n  }\n\n  try {\n    const {\n      data: menu\n    } = await axios.post(API.topPage.find, {\n      firstCategory: firstCategoryItem.id\n    });\n\n    if (menu.length == 0) {\n      return {\n        notFound: true\n      };\n    }\n\n    const {\n      data: page\n    } = await axios.get(API.topPage.byAlias + params.alias);\n    const {\n      data: products\n    } = await axios.post(API.product.find, {\n      category: page.category,\n      limit: 10\n    });\n    return {\n      props: {\n        menu,\n        firstCategory: firstCategoryItem.id,\n        page,\n        products\n      }\n    };\n  } catch (error) {\n    return {\n      notFound: true\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}